[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "COMP/STAT212 Portfolio",
    "section": "",
    "text": "Welcome\nWelcome to my online portfolio for COMP/STAT212 course taken at Macalester College. Please, use the side bar on the left for navigation.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "src/pv/pv-01.html",
    "href": "src/pv/pv-01.html",
    "title": "Professional Viz Sample",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "Prof Viz",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Professional Viz Sample</span>"
    ]
  },
  {
    "objectID": "src/tt/2025-07-08.html",
    "href": "src/tt/2025-07-08.html",
    "title": "TidyTuesday Sample 1",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>TidyTuesday Sample 1</span>"
    ]
  },
  {
    "objectID": "src/tt/2025-07-15.html",
    "href": "src/tt/2025-07-15.html",
    "title": "TidyTuesday Sample 2",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>TidyTuesday Sample 2</span>"
    ]
  },
  {
    "objectID": "src/tt/Homework_01_Intermediate_Data Science.html",
    "href": "src/tt/Homework_01_Intermediate_Data Science.html",
    "title": "Homework 01",
    "section": "",
    "text": "TidyTuesday Section\nExplore the week’s TidyTuesday challenge. Develop a research question, then answer it through a short data story with effective visualization(s). Provide sufficient background for readers to grasp your narrative.\nReasearch Question : How are holidays/weekends related to fatal car crashes in the united states?\nCodelibrary(tidyverse)",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Homework 01</span>"
    ]
  },
  {
    "objectID": "src/tt/Homework_01_Intermediate_Data Science.html#numeric-summary",
    "href": "src/tt/Homework_01_Intermediate_Data Science.html#numeric-summary",
    "title": "Homework 01",
    "section": "Numeric Summary",
    "text": "Numeric Summary\n\nCode# Getting a numeric summary of the plot \n# grouping by day so that we can get a summary of weekends (saturday and sunday combined)\n# %&gt;% -- its essentially saying and then everything that occured before is passed we don't need to create specific column if we have filtered it and piped it\n\nweekend_fatalities &lt;- daily_AccApril_22 %&gt;% \n  filter(fatalities_count &gt; 0, daily_AccApril_22$day %in% c (\"Saturday\", \"Sunday\")) %&gt;% \n  group_by(day) %&gt;% \n  summarise(total_fatalities = sum(fatalities_count),\n            mean_fatalities  = mean(fatalities_count),\n            median_fatalities = median(fatalities_count),\n            n_records = n())\n  weekend_fatalities\n\n# A tibble: 2 × 5\n  day      total_fatalities mean_fatalities median_fatalities n_records\n  &lt;chr&gt;               &lt;int&gt;           &lt;dbl&gt;             &lt;dbl&gt;     &lt;int&gt;\n1 Saturday           232803            178.               179      1305\n2 Sunday             198294            152.               153      1304\n\n\n##Lets compare the fatalities of weekdays and get a summary\n\nCodedaily_AccApril_22 %&gt;% \n  filter(fatalities_count &gt; 0, daily_AccApril_22$day %in% c (\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")) %&gt;%\n  ggplot(aes(x = day, y = fatalities_count)) + \n  geom_col(color = \"red\") + theme_classic()",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Homework 01</span>"
    ]
  },
  {
    "objectID": "src/tt/Homework_01_Intermediate_Data Science.html#lets-get-a-numeric-summary",
    "href": "src/tt/Homework_01_Intermediate_Data Science.html#lets-get-a-numeric-summary",
    "title": "Homework 01",
    "section": "Lets get a numeric summary",
    "text": "Lets get a numeric summary\n\nCodeweekdays_fatalities &lt;-daily_AccApril_22 %&gt;% \n  filter(fatalities_count &gt; 0, daily_AccApril_22$day %in% c (\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")) %&gt;%\n  group_by(day) %&gt;% \n  summarise(total_fatalities = sum(fatalities_count),\n            mean_fatalities  = mean(fatalities_count),\n            median_fatalities = median(fatalities_count),\n            n_records = n())\n\nweekdays_fatalities\n\n# A tibble: 5 × 5\n  day       total_fatalities mean_fatalities median_fatalities n_records\n  &lt;chr&gt;                &lt;int&gt;           &lt;dbl&gt;             &lt;dbl&gt;     &lt;int&gt;\n1 Friday              214731            165.               165      1305\n2 Monday              168534            129.               128      1304\n3 Thursday            177366            136.               135      1305\n4 Tuesday             164099            126.               125      1304\n5 Wednesday           169007            130.               129      1305",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Homework 01</span>"
    ]
  },
  {
    "objectID": "src/tt/Homework_01_Intermediate_Data Science.html#ggploting-weekday-vs-weekend",
    "href": "src/tt/Homework_01_Intermediate_Data Science.html#ggploting-weekday-vs-weekend",
    "title": "Homework 01",
    "section": "ggploting weekday vs weekend",
    "text": "ggploting weekday vs weekend\n\nCode# Cool, it shows that means fatalities is highest on Saturday,friday and sunday -- Lets plot mean fatalities of whole week and take mean of sunday, saturday and friday fatalities and compare with Monday, tuesday, Wednesday and thurday fatalities \n# ggplot distinctly assigns color from its default color palette for fill = day type \n# ifelse - if day in c (sunday/saturday), call it weekends or else call it a weekday\nallWeek_mean_fatalities &lt;- daily_AccApril_22 %&gt;%\n  mutate(day_type = ifelse(day %in% c(\"Saturday\", \"Sunday\"), \"Weekend\", \"Weekday\")) %&gt;% \n  group_by(day_type) %&gt;%\n  summarise(mean_fatalities = mean(fatalities_count, na.rm = TRUE)) \nallWeek_mean_fatalities\n\n# A tibble: 2 × 2\n  day_type mean_fatalities\n  &lt;chr&gt;              &lt;dbl&gt;\n1 Weekday             137.\n2 Weekend             165.\n\nCode  ggplot(allWeek_mean_fatalities, aes(x = day_type, y = mean_fatalities, fill = day_type)) + # ggplot distinctly assigns\n  geom_col() +\n  labs(title = \"Mean Fatalities: Weekdays vs Weekends\",\n       x = \"Day Type\",\n       y = \"Mean Fatalities\")",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Homework 01</span>"
    ]
  },
  {
    "objectID": "src/tt/Homework_01_Intermediate_Data Science.html#including-fridays-as-weekends",
    "href": "src/tt/Homework_01_Intermediate_Data Science.html#including-fridays-as-weekends",
    "title": "Homework 01",
    "section": "Including fridays as weekends",
    "text": "Including fridays as weekends\n####(Because most people do start their weekend on friday evening’s once work is done, so they drive and and are super excited)\n\nCodeallWeek_mean_fatalities &lt;- daily_AccApril_22 %&gt;%\n  mutate(day_type = ifelse(day %in% c(\"Friday\", \"Saturday\", \"Sunday\"), \"Weekend\", \"Weekday\")) %&gt;%\n  group_by(day_type) %&gt;%\n  summarise(mean_fatalities = mean(fatalities_count, na.rm = TRUE)) \nallWeek_mean_fatalities\n\n# A tibble: 2 × 2\n  day_type mean_fatalities\n  &lt;chr&gt;              &lt;dbl&gt;\n1 Weekday             130.\n2 Weekend             165.\n\nCode  ggplot(allWeek_mean_fatalities, aes(x = day_type, y = mean_fatalities, fill = day_type)) +\n  geom_col() +\n  labs(title = \"Mean Fatalities: Weekdays vs Weekends\",\n       x = \"Day Type\",\n       y = \"Mean Fatalities\")",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Homework 01</span>"
    ]
  },
  {
    "objectID": "src/tt/Homework_01_Intermediate_Data Science.html#conclusion",
    "href": "src/tt/Homework_01_Intermediate_Data Science.html#conclusion",
    "title": "Homework 01",
    "section": "Conclusion",
    "text": "Conclusion\nConclusion : The data does support the Research question showing that on average there’s 28 more fatalities due to car accidents on weekends than weekdays in the US history from 1992 to 2016. Additionally, due to nature of car accidents I have added friday to weekends as more people see Friday evening as the beginning of weekens and as per the analysis on average if we combine Friday, Saturday and Sunday there 35 more fatalities due to car accidents on weekends than weekdays in the US history from 1992 to 2016.\nData source/refrence : https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-04-22/readme.md|\n#Tidy Tuesday",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Homework 01</span>"
    ]
  },
  {
    "objectID": "src/ica/ica-sample1.html",
    "href": "src/ica/ica-sample1.html",
    "title": "ICA Sample 1",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ICA Sample 1</span>"
    ]
  },
  {
    "objectID": "src/ica/ica-sample2.html",
    "href": "src/ica/ica-sample2.html",
    "title": "ICA Sample 2",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>ICA Sample 2</span>"
    ]
  },
  {
    "objectID": "src/ica/02-Intermediate-DS-Review.html",
    "href": "src/ica/02-Intermediate-DS-Review.html",
    "title": "Cleaning SFO Weather Data",
    "section": "",
    "text": "Exercise\nCarryout the following steps to clean and save the San Francisco Weather data. Make sure to download and add the data file to your portfolio repository as instructed.\nCode# 1st\nlibrary(tidyverse)\nWeather_Data &lt;- read_csv(\"../../data/raw/Weather_Data_Review.csv\")\nview(Weather_Data)\nCode# 2nd \nWeather_Clean &lt;- Weather_Data %&gt;% \n  mutate(PrecipYr = na_if(PrecipYr, 99999))\nCode# 3rd \nWeather_Clean &lt;- Weather_Clean %&gt;% \n  arrange(Month, Day) %&gt;%\n  mutate(dateInYear = 1:365)\n  \nglimpse(Weather_Clean) # confirmed the new variables added \n\nRows: 365\nColumns: 19\n$ Month        &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ Day          &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ Low          &lt;dbl&gt; 47, 48, 45, 39, 38, 37, 39, 43, 39, 36, 43, 48, 45, 50, 4…\n$ High         &lt;dbl&gt; 52, 51, 53, 53, 55, 52, 47, 49, 48, 49, 49, 55, 56, 60, 6…\n$ NormalLow    &lt;dbl&gt; 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 4…\n$ NormalHigh   &lt;dbl&gt; 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 5…\n$ RecordLow    &lt;dbl&gt; 31, 29, 31, 29, 26, 29, 31, 30, 33, 29, 30, 32, 29, 31, 3…\n$ LowYr        &lt;dbl&gt; 1965, 1960, 1950, 1949, 1949, 1950, 1973, 1955, 1957, 194…\n$ RecordHigh   &lt;dbl&gt; 68, 69, 69, 62, 65, 66, 65, 70, 71, 68, 69, 70, 72, 67, 6…\n$ HiYear       &lt;dbl&gt; 1996, 1996, 2000, 2006, 1986, 2003, 2003, 1962, 1962, 195…\n$ Precip       &lt;dbl&gt; 0.09, 0.35, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0…\n$ RecordPrecip &lt;dbl&gt; 2.16, 1.67, 1.33, 5.59, 1.98, 2.34, 0.87, 1.33, 1.31, 1.2…\n$ PrecipYr     &lt;dbl&gt; 2004, 1977, 1974, 1982, 1959, 1993, 1956, 1979, 1995, 195…\n$ date         &lt;chr&gt; \"1/1/11\", \"1/2/11\", \"1/3/11\", \"1/4/11\", \"1/5/11\", \"1/6/11…\n$ Record       &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ RecordText   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ RecordP      &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ CulmPrec     &lt;dbl&gt; 0.09, 0.44, 0.44, 0.44, 0.44, 0.44, 0.44, 0.44, 0.44, 0.4…\n$ dateInYear   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\nCode# 4th via sunsetting of vector(need to review it again)\n Weather_Data %&gt;% \n    mutate(month_name = month.abb[Month]) %&gt;% head() # it worked \n\n# A tibble: 6 × 19\n  Month   Day   Low  High NormalLow NormalHigh RecordLow LowYr RecordHigh HiYear\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;  &lt;dbl&gt;\n1    11    20    48    55        48         62        35  1964         69   2005\n2     6    16    52    68        53         70        46  1952         90   1961\n3     5     9    47    63        50         66        41  1950         88   1993\n4    10    26    47    69        52         69        39  1954         89   2003\n5     9    27    55    82        55         73        47  1955         96   2010\n6     7     6    52    70        54         71        47  1953         86   1957\n# ℹ 9 more variables: Precip &lt;dbl&gt;, RecordPrecip &lt;dbl&gt;, PrecipYr &lt;dbl&gt;,\n#   date &lt;chr&gt;, Record &lt;lgl&gt;, RecordText &lt;chr&gt;, RecordP &lt;lgl&gt;, CulmPrec &lt;dbl&gt;,\n#   month_name &lt;chr&gt;\n\nCodeglimpse(Weather_Data)\n\nRows: 365\nColumns: 18\n$ Month        &lt;dbl&gt; 11, 6, 5, 10, 9, 7, 11, 3, 10, 11, 9, 11, 3, 8, 2, 4, 8, …\n$ Day          &lt;dbl&gt; 20, 16, 9, 26, 27, 6, 3, 26, 4, 26, 20, 25, 20, 1, 6, 15,…\n$ Low          &lt;dbl&gt; 48, 52, 47, 47, 55, 52, 48, 47, 57, 49, 57, 48, 47, 56, 5…\n$ High         &lt;dbl&gt; 55, 68, 63, 69, 82, 70, 60, 58, 66, 59, 86, 57, 57, 69, 7…\n$ NormalLow    &lt;dbl&gt; 48, 53, 50, 52, 55, 54, 51, 47, 55, 47, 56, 47, 47, 56, 4…\n$ NormalHigh   &lt;dbl&gt; 62, 70, 66, 69, 73, 71, 66, 62, 72, 60, 74, 60, 61, 72, 5…\n$ RecordLow    &lt;dbl&gt; 35, 46, 41, 39, 47, 47, 40, 38, 47, 36, 48, 36, 38, 48, 3…\n$ LowYr        &lt;dbl&gt; 1964, 1952, 1950, 1954, 1955, 1953, 1971, 1980, 1989, 195…\n$ RecordHigh   &lt;dbl&gt; 69, 90, 88, 89, 96, 86, 84, 79, 95, 76, 93, 72, 78, 100, …\n$ HiYear       &lt;dbl&gt; 2005, 1961, 1993, 2003, 2010, 1957, 1945, 1952, 1987, 195…\n$ Precip       &lt;dbl&gt; 0.17, 0.00, 0.00, 0.00, 0.00, 0.00, 0.02, 0.57, 0.26, 0.0…\n$ RecordPrecip &lt;dbl&gt; 0.75, 0.35, 0.20, 1.20, 0.81, 0.00, 0.88, 1.05, 0.33, 1.2…\n$ PrecipYr     &lt;dbl&gt; 1961, 1995, 1980, 2004, 1957, 99999, 1972, 1985, 1994, 19…\n$ date         &lt;chr&gt; \"11/20/11\", \"6/16/11\", \"5/9/11\", \"10/26/11\", \"9/27/11\", \"…\n$ Record       &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ RecordText   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"…\n$ RecordP      &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ CulmPrec     &lt;dbl&gt; 1.42, 0.97, 0.00, 1.18, 0.01, 0.00, 0.02, 5.68, 0.42, 1.5…\nCode# Writing the processed/cleaned data in the processed folder \nwrite_csv(Weather_Clean, file = \"../../data/processed/Weather_Clean.csv\")",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Cleaning SFO Weather Data</span>"
    ]
  },
  {
    "objectID": "src/ica/02-Intermediate-DS-Review.html#exercise",
    "href": "src/ica/02-Intermediate-DS-Review.html#exercise",
    "title": "Cleaning SFO Weather Data",
    "section": "",
    "text": "Read in the weather data in this file with the correct relative file path after you move it to the instructed location.\nThere is a variable that has values that don’t make sense in the data context. Figure out which variable this is and clean it up by making those values missing using na_if().\nCreate a variable called dateInYear that indicates the day of the year (1-365) for each case. (Jan 1 should be 1, and Dec 31 should be 365).\nCreate a variable called month_name that shows the 3-letter abbreviation for each case.\nSave the wrangled data to the data/processed/ folder using write_csv(). Name this file weather_clean.csv. Look up the documentation for this function by typing ?write_csv in the Console. You’ll need to write an appropriate relative path.",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Cleaning SFO Weather Data</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot.html",
    "href": "src/ica/03-adv-ggplot.html",
    "title": "3 Advanced Data Viz",
    "section": "",
    "text": "🧩 Learning Goals\nBy the end of this lesson, you should be able to:",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot.html#learning-goals",
    "href": "src/ica/03-adv-ggplot.html#learning-goals",
    "title": "3 Advanced Data Viz",
    "section": "",
    "text": "Navigate ggplot2 reference page to find needed functions for a desired visualization\nNavigate the different sections of a function help page to construct desired plot features, in particular,\n\nNavigate the Usage section to identify arguments that must be set\nNavigate the Arguments section to understand how arguments work\nNavigate the Aesthetics section to learn how plot appearance can be controlled\nNavigate the Examples section for some usage examples\n\n\nIdentify when to use different data arguments within ggplot() and geom_() layers",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot.html#introduction",
    "href": "src/ica/03-adv-ggplot.html#introduction",
    "title": "3 Advanced Data Viz",
    "section": "Introduction 1\n",
    "text": "Introduction 1\n\nIn this lesson, we are going to recreate NYTimes 2015 Temperature Visualization (html) using data from San Francisco (SFO) in 2011.\n\n\nScreenshot of NYTimes 2015 Temperature Visualization",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot.html#reading-data",
    "href": "src/ica/03-adv-ggplot.html#reading-data",
    "title": "3 Advanced Data Viz",
    "section": "Reading Data",
    "text": "Reading Data\nRun the code chunk below to load the tidyverse package and read in the San Francisco weather data.\n\nCodelibrary(tidyverse)\nweather &lt;- read_csv(\"https://mac-stat.github.io/data/sfo_weather.csv\")",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot.html#understanding-data",
    "href": "src/ica/03-adv-ggplot.html#understanding-data",
    "title": "3 Advanced Data Viz",
    "section": "Understanding Data",
    "text": "Understanding Data\nBelow is the codebook of the data. Familiarize yourself with the meaning of each variable. Use the codebook as a reference when using the data.\n\n\nMonth: Month of the year (1-12)\n\nDay: Day within the month (1-31)\n\nLow/High: Low/high temperature this day\n\nNormalLow/NormalHigh: Typical low/high temperature for this day of the year\n\nRecordLow/RecordHigh: Record low/high temperature for this day of the year\n\nLowYr/HighYr: Year in which the record low/high was observed\n\nPrecip: Amount of precipitation (inches) this day\n\nRecordPrecip: Record amount of precipitation for this day of the year\n\nPrecipYr: Year in which the record precipitation was observed\n\ndate: The actual date in 2011 for this day in YYYY-MM-DD format\n\ndateInYear: What day of the year is it? (1-365)\n\nRecord: Logical (TRUE/FALSE) indicating whether this day had a high temperature record\n\nRecordText: Text that displays the record high for this day (\"Record high: ##\")\n\nRecordP: Logical (TRUE/FALSE) indicating whether this day had a precipitation record\n\nCulmPrec: Cumulative precipitation for the month up to this day",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot.html#exercise-1",
    "href": "src/ica/03-adv-ggplot.html#exercise-1",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 1",
    "text": "Exercise 1\nExamine the NYTimes 2015 Temperature Visualization (html) then answer the following questions.\nData Storytelling\n\nRelate the intro paragraph: “Scientists declared that 2015 was Earth’s hottest year on record…” to the design of the visualization. In particular, based on the intro paragraph,\n\nWhat key message/claim does NYTimes want readers to be able to explore? Response : 2015 being the hottest year\nHow did this goal inform what information is displayed in the visualization? Response : Each day temp through the year 2015 with range showing normal and record highs\n\n\n\nAesthetic Mapping\n\nWhat specific variables (from the data codebook) underlie the visualization? Response : dateInYear, Record, Record High/ Record Low, Precip / RecordPrecip / CulmPrec, Normal High, Normal Low, High, Low – all these variabkes underlie the visualization\nHow do these variables map to aesthetics of the visual elements, eg, position, size, shape, and color of glyphs?\n\nResponse : DateInYear is mapped to High/Low, Normal Hig/ Normal Low, record high/record low. The other aesthetics that are added to differentiate and distinguish are shape, color(to distinguish between actual,Normal,and record ), size, transparency for normal, actual and record.",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot.html#exercise-2",
    "href": "src/ica/03-adv-ggplot.html#exercise-2",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 2",
    "text": "Exercise 2\nNavigate the Geoms section of the ggplot2 reference page to find a geom that corresponds to the visual elements in the temperature plot. Using both the small thumbnail visuals on the right and the names of the geom’s, brainstorm some possibilities for geom’s you might use to recreate the temperature visualization.\n\n\n\n\n\n\nNavigating Documentation / Reference Pages\n\n\n\nYou need to navigate the geoms further by opening up their reference pages to understand if a particular geom is suitable for our task. Let’s look at the geom_point documentation page to learn how to read a documentation page..\nThe Usage section shows all of the possible inputs (arguments) to the geom. These are all of the ways that a geom can be customized. Just looking at the argument names can help give a hint as to what arguments might fit our needs.\nThe Arguments section, on the other hand, explains in detail what each argument does and the possible values the argument can take. The mapping, data, and ... arguments will be the most commonly used by far.\n\n\nmapping is the argument that is being used when we specify which variables should link or map to the plot aesthetics (the code inside aes()).\n\ndata is the argument where we specify the dataset containing the variables that the geom is using.\n\n... is used for fixed aesthetics (ones that don’t correspond to a variable), eg, to set the color of all points, we use color = \"red\" and to set the size of all points, we use size = 3.\n\nThe Aesthetics section of a geom documentation page gives information on how the visual elements of the geom correspond to data. For example, the geom_point documentation page shows that x and y aesthetics are available. It also shows some new aesthetics like stroke.\n\n\n\n\n\n\n\n\ndata Argument\n\n\n\nPreviously you have used one dataset per plot by specifying that as the first argument of ggplot(). However, multiple data sets can be passed into ggplot as shown in the example below.\n\nCodedata(diamonds)\n\ndiamonds_avg_price &lt;- diamonds |&gt;\n  group_by(carat) |&gt;\n  summarize(avg_price = mean(price)) |&gt;\n  arrange(carat)\ndiamonds_avg_price &lt;- diamonds_avg_price[seq(1, nrow(diamonds_avg_price), 3), ]\n\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_point() +\n  geom_point(\n    data = diamonds_avg_price,\n    aes(x = carat, y = avg_price),\n    color = \"deepskyblue\",\n    size = 3\n  )\n\n\n\n\n\n\n\n\n\nLook at the geom_linerange documentation page and start off your temperature visualization with the record lows and highs. Your plot should look like the one below. The hex code of the used light tan color is #ECEBE3.\n Notes to refresh few concepts : - Aesthetics in ggplot is basically any visual attributes of geometric elements (stuff that gets drawn on plot) such as position of axes, color, shape, size, points, linetype, line width, etc - Mapping in ggplot is basically how variables in your data relate to thoese visual attributes. Example in aes (), you specify which variable should control a visual attribute) like aes(x=date, y= temp, color = region etc). Remember inside aes() it maps to a specfic variable, outside aes() it maps to everything\n\nCode# geom_linerange basically allows to plot range (two values of y: low and max with 1 x value )\nggplot(weather, aes(x = dateInYear, ymin = weather$RecordLow, ymax = weather$RecordHigh)) + \n  geom_linerange(color = \"#ECEBE3\")+ theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeyboard Shortcuts\n\n\n\nAs you work on this plot, try to use some new keyboard shortcuts. Focus on the following:\n\nInsert code chunk: Ctrl+Alt+I (Windows). Option+Command+I (Mac).\nRun current code chunk: Ctrl+Shift+Enter (Windows). Command+Shift+Return (Mac).\nRun current line/currently selected lines: Ctrl+Enter (Windows). Command+Return (Mac).",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot.html#exercise-3",
    "href": "src/ica/03-adv-ggplot.html#exercise-3",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 3",
    "text": "Exercise 3\nIn your visualization, also display the usual temperatures (NormalLow and NormalHigh) and actual 2011 temperatures (Low and High). Your plot should look like the one below. The hex code of the color used for the usual temperatures is \"#C8B8BA\" and for the color used for actual temperatures is \"#A90248\".\n\n\nSFO observed, Average, and Record Daily Temperatures in 2011\n\n\nCode# to add new layer representing more y values, we just use + and continue adding layers (no seperate operator in ggplot). \n# mistake occured in 2nd layer beacuse geom_linerange only requires its variables that are mapped with our variables to be min or max(inferred from docs after error occured)\nggplot(weather, aes(x = dateInYear)) +\n       geom_linerange(color = \"#ECEBE3\", aes(ymin = weather$RecordLow, ymax = weather$RecordHigh))+ theme_classic() +\n       geom_linerange(color =\"#C8B8BA\", aes(ymin = weather$NormalLow, ymax = weather$NormalHigh)) +\n       geom_linerange(color = \"#A90248\", aes(ymin = weather$Low, ymax = weather$High ))\n\n\n\n\n\n\n\n\n\n\n\n\n\nFiner Control\n\n\n\nIf you’d like finer control of the width of these lines/rectangles, check out the geom_rect documentation page.",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot.html#exercise-4",
    "href": "src/ica/03-adv-ggplot.html#exercise-4",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 4",
    "text": "Exercise 4\nRecreate the visual demarcations of the months by adding vertical lines separating the months. Brainstorm how we might draw those vertical lines. What geom might we use? What subset of the data might we use in that geom layer to draw lines only at the month divisions?\n\nCode# Using geom_vline() to draw vertical lines by month\n# gemo_vline only draws a line for a specific x coordinate\n\nmonth_start_dates &lt;- c(1,32, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335)\nggplot(weather, aes(x = dateInYear)) +\n       geom_linerange(color = \"#ECEBE3\", aes(ymin = weather$RecordLow, ymax = weather$RecordHigh))+ theme_classic() +\n       geom_linerange(color =\"#C8B8BA\", aes(ymin = weather$NormalLow, ymax = weather$NormalHigh)) +\n       geom_linerange(color = \"#A90248\", aes(ymin = weather$Low, ymax = weather$High )) +\n       geom_vline(xintercept =  month_start_dates, color = \"gray\", linetype = \"dashed\") # since the xintecept= monthstars, is not a column in our data, we put it outstide of aesthetics",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot.html#exercise-5",
    "href": "src/ica/03-adv-ggplot.html#exercise-5",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 5",
    "text": "Exercise 5\nChange the x-axis labels so that the month names display in the center of each month’s slice of the plot.\n\n\n\n\n\n\nMonth Names\n\n\n\nR has built-in variables called month.abb and month.name that contain abbreviated and full month names.\n\n\nTry to figuring out this new challenge using search engines and LLMs:\n\nSearch Engines. Use Google to search for possible solutions using the jargon that is most likely to return the most relevant results. Record search queries and your thought process in selecting which search results to look at first.\nLLMs. Use ChatGPT or Gemini with prompts that will most efficiently get you the desired results. Record the chat prompts used and output given. Evaluate the output. Do you fully understand the code generated? How can you tell that the generated code is correct?",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot.html#exercise-6",
    "href": "src/ica/03-adv-ggplot.html#exercise-6",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 6",
    "text": "Exercise 6\nCreate a precipitation plot that looks like the following. Note that\n\nThe triangles point to precipitation records–refer to the data codebook above for the RecordP variable.\nThe numbers on the plot indicate the total precipitation for the month–search the hjust and vjust options to adjust the alignment of the numbers.\nThe blue and tan colors hex codes are \"#32a3d8\" and \"#ebeae2\", respectively.\n\n\n\nSFO Precipitation in 2011\n\n\nCode# triangles area, using geom_area, for blue lines using geom_line, taking only subset of weather data only takes it when record is 1 meaning it makes a record, taking a shape and, color and size\n# geom_text directly puts label on the graph -- very cool! \n\n\n\n ggplot(weather, aes(x= dateInYear, y = CulmPrec)) + theme_classic() +\n  geom_area(fill = \"#ebeae2\") + \n  geom_line(color = \"#32a3d8\") + \n  geom_point(data = subset(weather, RecordP == 1),\n             shape = 25, fill = \"black\", size = 3)\n\n\n\n\n\n\nCode  # Need to talk to preceptors regarding logic of putting lable on graph with geom_text()",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot.html#done",
    "href": "src/ica/03-adv-ggplot.html#done",
    "title": "3 Advanced Data Viz",
    "section": "Done!",
    "text": "Done!\n\nCheck the ICA Instructions for how to (a) push your code to GitHub and (b) update your portfolio website",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot.html#footnotes",
    "href": "src/ica/03-adv-ggplot.html#footnotes",
    "title": "3 Advanced Data Viz",
    "section": "",
    "text": "The exercise in this lesson are inspired by an assignment from the Concepts in Computing with Data course at UC Berkeley taught by Dr. Deborah Nolan.↩︎",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/04_adv_maps/code/Advanced_maps.html",
    "href": "src/ica/04_adv_maps/code/Advanced_maps.html",
    "title": "4 Advanced Spatial Viz P1",
    "section": "",
    "text": "🧩 Learning Goals\nBy the end of this lesson, you should be able to:",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>4 Advanced Spatial Viz P1</span>"
    ]
  },
  {
    "objectID": "src/ica/04_adv_maps/code/Advanced_maps.html#learning-goals",
    "href": "src/ica/04_adv_maps/code/Advanced_maps.html#learning-goals",
    "title": "4 Advanced Spatial Viz P1",
    "section": "",
    "text": "Understand the basics of a CRS (coordinate reference system)\nUnderstand and recognize different spatial file types and data types in R\nImplement some of the basic plotting with the sf package\nUnderstand foundational ideas in working with spatial data (aggregating spatial point data to a spatial region, joining spatial data sets)",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>4 Advanced Spatial Viz P1</span>"
    ]
  },
  {
    "objectID": "src/ica/04_adv_maps/code/Advanced_maps.html#additional-resources",
    "href": "src/ica/04_adv_maps/code/Advanced_maps.html#additional-resources",
    "title": "4 Advanced Spatial Viz P1",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nSpatial Data Science with Applications in R book: web\n\nSpatial Data Science with R and terra Resources: web\n\nLeaflet in R Package: web\n\nCRAN task view on spatial analysis: web",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>4 Advanced Spatial Viz P1</span>"
    ]
  },
  {
    "objectID": "src/ica/04_adv_maps/code/Advanced_maps.html#setup",
    "href": "src/ica/04_adv_maps/code/Advanced_maps.html#setup",
    "title": "4 Advanced Spatial Viz P1",
    "section": "Setup",
    "text": "Setup\nFor this activity, create the following directory structure in your portfolio repository under src/ica folder:\nportfolio\n└─ src\n   └─ ica\n      └─ 04_adv_maps\n         ├─ code\n         │  └─ 04-adv-maps-1-notes.qmd\n         ├─ data\n         │  └─ ...  ← saving data here during this activity\n         └─ figures\n            └─ ...  ← saving created maps here during this activity\nFirst load required packages.\n\nCode# Note to me : This r setup is a name of the code chunk -- setup is codechunk name and r means r code chunk\n#Install these packages first\n\n# install.packages(c(\"sf\",\"elevatr\",\"terra\",\"stars\",\"tidycensus\"))\n# install.packages('devtools')\n# devtools::install_github(\"ropensci/USAboundaries\")\n# install.packages(\"USAboundariesData\", repos = \"https://ropensci.r-universe.dev\", type = \"source\")\n\n\nlibrary(tidyverse)\nlibrary(sf) # tools for working with spatial vector data (GIS functionality, mapping)\nlibrary(elevatr) # access to raster elevation maps\nlibrary(terra)\nlibrary(stars)\nlibrary(tidycensus) # spatial data for the US with census information\nlibrary(USAboundaries) # access to boundaries for US states, counties, zip codes, and congressional districts",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>4 Advanced Spatial Viz P1</span>"
    ]
  },
  {
    "objectID": "src/ica/04_adv_maps/code/Advanced_maps.html#spatial-data-in-r",
    "href": "src/ica/04_adv_maps/code/Advanced_maps.html#spatial-data-in-r",
    "title": "4 Advanced Spatial Viz P1",
    "section": "Spatial Data in R",
    "text": "Spatial Data in R\nSee Spatial Data Appendix for basics of CRS and spatial data types.\nDownload Shapefiles\n\nNavigate to the following URLs to download the spatial data files we’ll be using in this activity. Put these files in the data folder of your 04_adv_maps folder.\n\n\nMN cities: https://gisdata.mn.gov/dataset/loc-pop-centers\n\nFile type: shapefile (.shp)\nFile name: shp_loc_pop_centers.zip (Unzip this after downloading.)\n\n\nMN water: https://gisdata.mn.gov/dataset/us-mn-state-metc-water-lakes-rivers\n\nFile type: shapefile (.shp)\nFile name: shp_water_lakes_rivers.zip (Unzip this after downloading.)\n\n\nRead in Files\n\nRead in the MN cities and MN water shapefiles by entering the correct relative paths in st_read(). Tab completion will be very helpful here: type part of a directory or file name and hit tab to autocomplete or bring up a dropdown of options.\n\n\n\nCode# The sf package comes with a North Carolina shapefile:\nnc &lt;- st_read(system.file(\"shape/nc.shp\", package = \"sf\"))\n\nReading layer `nc' from data source \n  `/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/sf/shape/nc.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 100 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\n\nCode# Read in shapefiles just downloaded\nmn_cities &lt;- st_read(\"../Data/Lakes_and_Rivers_Open_Water_Features/LakesAndRivers.shp\")\n\nReading layer `LakesAndRivers' from data source \n  `/Users/mohammedsohailkhan/Desktop/Fall_2025/Intermediate_DS/Portfolio/portfolio-Sohail-44/src/ica/04_adv_maps/Data/Lakes_and_Rivers_Open_Water_Features/LakesAndRivers.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2313 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 419538.6 ymin: 4922700 xmax: 522665 ymax: 5029945\nProjected CRS: NAD83 / UTM zone 15N\n\nCodemn_water &lt;- st_read(\"../Data/Minnesota_Population_Centers/city_and_township_population_centers.shp\")\n\nReading layer `city_and_township_population_centers' from data source \n  `/Users/mohammedsohailkhan/Desktop/Fall_2025/Intermediate_DS/Portfolio/portfolio-Sohail-44/src/ica/04_adv_maps/Data/Minnesota_Population_Centers/city_and_township_population_centers.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1081 features and 8 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 190832.6 ymin: 4816672 xmax: 747463.4 ymax: 5468045\nProjected CRS: NAD83 / UTM zone 15N\n\n\nThe sf package reads in spatial data in data.frame-like format. Using the class() function we can check the class (type) of object that we just read in. Note the presence of the “sf” and “data.frame” classes:\n\nCodeclass(nc)\n\n[1] \"sf\"         \"data.frame\"\n\nCodeclass(mn_cities)\n\n[1] \"sf\"         \"data.frame\"\n\nCodeclass(mn_water)\n\n[1] \"sf\"         \"data.frame\"\n\n\nWhen we read in spatial objects, it is useful to check what CRS underlies the data. We can do that with st_crs() from the sf package:\n\nCodest_crs(nc)\n\nCoordinate Reference System:\n  User input: NAD27 \n  wkt:\nGEOGCRS[\"NAD27\",\n    DATUM[\"North American Datum 1927\",\n        ELLIPSOID[\"Clarke 1866\",6378206.4,294.978698213898,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4267]]\n\n\nWe can treat sf objects similarly to ordinary datasets when using ggplot2 to make spatial visualizations:\n\nCodeggplot(nc) +\n    geom_sf() +\n    theme_classic() +\n    labs(title = \"NAD27\")\n\n\n\n\n\n\n\nChange CRS\n\nLet’s explore how changing the CRS changes the map. The st_transform() function in sf re-expresses a spatial object using a user-supplied CRS. The crs argument takes a string descriptor of the CRS. We can find these descriptors via https://epsg.io. In the example below, I searched for “South Carolina”.\n\n\nCodenc_transformed &lt;- nc |&gt; st_transform(crs = \"EPSG:32133\")\nst_crs(nc_transformed)\n\nCoordinate Reference System:\n  User input: EPSG:32133 \n  wkt:\nPROJCRS[\"NAD83 / South Carolina\",\n    BASEGEOGCRS[\"NAD83\",\n        DATUM[\"North American Datum 1983\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4269]],\n    CONVERSION[\"SPCS83 South Carolina zone (meter)\",\n        METHOD[\"Lambert Conic Conformal (2SP)\",\n            ID[\"EPSG\",9802]],\n        PARAMETER[\"Latitude of false origin\",31.8333333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8821]],\n        PARAMETER[\"Longitude of false origin\",-81,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8822]],\n        PARAMETER[\"Latitude of 1st standard parallel\",34.8333333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8823]],\n        PARAMETER[\"Latitude of 2nd standard parallel\",32.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8824]],\n        PARAMETER[\"Easting at false origin\",609600,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8826]],\n        PARAMETER[\"Northing at false origin\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8827]]],\n    CS[Cartesian,2],\n        AXIS[\"easting (X)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"northing (Y)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"United States (USA) - South Carolina - counties of Abbeville; Aiken; Allendale; Anderson; Bamberg; Barnwell; Beaufort; Berkeley; Calhoun; Charleston; Cherokee; Chester; Chesterfield; Clarendon; Colleton; Darlington; Dillon; Dorchester; Edgefield; Fairfield; Florence; Georgetown; Greenville; Greenwood; Hampton; Horry; Jasper; Kershaw; Lancaster; Laurens; Lee; Lexington; Marion; Marlboro; McCormick; Newberry; Oconee; Orangeburg; Pickens; Richland; Saluda; Spartanburg; Sumter; Union; Williamsburg; York.\"],\n        BBOX[32.05,-83.36,35.21,-78.52]],\n    ID[\"EPSG\",32133]]\n\nCodeggplot(nc_transformed) +\n    geom_sf() +\n    theme_classic()\n\n\n\n\n\n\n\nThe goal is to use https://epsg.io to find two CRSs that result in a North Carolina map that is noticeably different from the original in the NAD27 CRS.\nTake a look at the function below that re-maps a spatial object using a new CRS.\n\nRead through the function to get a sense for how this code works.\n\nspatial_obj and new_crs are called arguments (function inputs).\n\nAdd one more argument called title to this function. Use this input to set the plot title.\n\n\nUse your function to make two new maps using your chosen CRSs.\n\n\nCodetransform_and_plot &lt;- function(spatial_obj, new_crs, title = 'Chicago Map') {\n    spatial_obj %&gt;% \n        st_transform(crs = new_crs) %&gt;% \n        ggplot() +\n            geom_sf() +\n            theme_classic()\n  \n}\n\n# Example usage of this function (using a South Carolina CRS)\ntransform_and_plot(nc, new_crs = \"EPSG:32133\")\n\n\n\n\n\n\n\nVerify your understanding: If you had point location data that was not in the NAD27 CRS, what would you expect about the accuracy of how they would be overlaid on the original North Carolina map?",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>4 Advanced Spatial Viz P1</span>"
    ]
  },
  {
    "objectID": "src/ica/04_adv_maps/code/Advanced_maps.html#mn-map-with-multiple-layers",
    "href": "src/ica/04_adv_maps/code/Advanced_maps.html#mn-map-with-multiple-layers",
    "title": "4 Advanced Spatial Viz P1",
    "section": "MN Map with Multiple Layers",
    "text": "MN Map with Multiple Layers\nGoal: create a map of MN with different layers of information (city point locations, county polygon boundaries, rivers as lines and polygons, and a raster elevation map).\nGet County Boundaries\n\nWe’ve already read in city location and water information from external shapefiles. We can access county boundaries with the us_counties() function in the USAboundaries package.\n\n\nCode# Load country boundaries data as sf object\nmn_counties &lt;- USAboundaries::us_counties(resolution = \"high\", states = \"Minnesota\")\n\n# Take care of duplicate column names (there are two identical \"state_name\" columns)\nnames_counties &lt;- names(mn_counties)\nnames(mn_counties)[names_counties == \"state_name\"] &lt;- c(\"state_name1\", \"state_name2\")\n\n\nUnifying CRSs Across Different Spatial Datasets\n\nWe first need to ensure that the CRS is the same for all spatial datasets.\n\n\nCheck the CRS for the mn_cities, mn_water, and mn_counties datasets.\nIf the datasets don’t all have the same CRS, use st_transform() to update the datasets to have the same CRS as mn_cities. You can use crs = st_crs(mn_cities) within st_transform().\nCounties + Cities\n\nCreate a map where city locations are overlaid on a map of county boundaries.\n\n\nYou will need to call geom_sf() twice.\nMake the map background white.\nInstall the ggthemes package, and add the following layer to use a clean map theme: + ggthemes::theme_map()\n\nCustomize Colors\n\nWe can use traditional ggplot2 aesthetics (e.g., fill, color) to display location specific attributes. Below we only plot large cities, and we color and size cities according to their population.\n\n\nCode#ggplot() +\n    #geom_sf(data = mn_counties, fill = \"white\") + \n    #geom_sf(data = mn_cities |&gt; filter(Population &gt;= 10000), mapping = aes(color = Population, size = Population)) + # cities layer\n    #scale_color_viridis_c() + # continuous (gradient) color scale\n    #labs(title = \"Minnesota Cities with Population &gt;= 10,000\") + \n    #ggthemes::theme_map() +\n    #theme(legend.position = \"bottom\") # move legend\n\n\nLook up the scale_color_viridis_c() documentation via the ggplot2 reference.\n\nRead the function description at the top. What is the advantage of using this function for making color palettes?\nLook through the examples section. What is the difference between the _d(), _c(), and _b() variants of this function?\nAdding Elevation Raster Data\nWhere are large cities located? Is there some relationship to local geography/terrain?\n\nTo investigate these questions, we can obtain elevation data to include on the map using the elevatr package. We encounter two new functions here—we can look up their documentation to make sense of the code by entering the following in the Console:\n\n\n?elevatr::get_elev_raster\n?terra::as.data.frame\n\n\nCode#elevation &lt;- elevatr::get_elev_raster(mn_counties, z = 5, clip = \"bbox\")\n#raster::crs(elevation) &lt;- sf::st_crs(mn_counties)\n\n# Convert to data frame for plotting\n#elev_df &lt;- elevation |&gt; terra::as.data.frame(xy = TRUE)\n#colnames(elev_df) &lt;- c(\"x\", \"y\", \"elevation\")\n\n\nBuild on our existing map by adding a raster layer for elevation as the background.\n\nLook up the documentation for geom_raster() to plot the elevation data from elev_df. This will be the first layer of the plot.\nLook at the documentation for scale_fill_gradient() to add the following elevation color scale: \"darkgreen\" represents the lowest elevations, and \"white\" represents the highest elevations.\nAdd in the layers from the map above to show the largest cities and the county outlines. To remove a background color, use fill = NA.\nZoom in to Twin Cities and Add Water\n\nThe bulk of the interesting information in this map is in the Twin Cities area. Let’s zoom in to this area.\n\n\nWe can use the st_bbox() function to get the bounding box for a spatial object—we do this after filtering to the 7 counties in the Twin Cities.\nWe then use st_crop() to trim a spatial object to a given bounding box.\n\n\nCodeseven_countyarea &lt;- mn_counties |&gt;\n    filter(name %in% c(\"Anoka\", \"Hennepin\", \"Ramsey\", \"Dakota\", \"Carver\", \"Washington\", \"Scott\")) |&gt; \n    st_bbox()\nseven_countyarea\n\n     xmin      ymin      xmax      ymax \n-94.01250  44.47115 -92.73204  45.41480 \n\nCode#elevation &lt;- elevatr::get_elev_raster(mn_counties |&gt; st_crop(seven_countyarea), z = 9, clip = \"bbox\")\n#raster::crs(elevation) &lt;- sf::st_crs(mn_counties)\n\n# Convert to data frame for plotting\n#elev_df &lt;- elevation |&gt; terra::as.data.frame(xy = TRUE)\n#colnames(elev_df) &lt;- c(\"x\", \"y\", \"elevation\")\n\n\nIn the plot below, we add a layer for water information and a coord_sf() layer to restrict the x and y-axis limits to the Twin Cities bounding box. (Without this layer, the map would zoom back out to show all counties and bodies of water).\n\nCode#ggplot() +\n    #geom_raster(data = elev_df, aes(x = x, y = y, fill = elevation)) + \n    #geom_sf(data = mn_counties, fill = NA, color = \"black\") + # county boundary layer\n    #geom_sf(data = mn_water, fill = \"lightsteelblue1\", color = \"lightsteelblue1\") + # NEW: river/lake layer\n    #geom_sf(data = mn_cities |&gt; filter(Population &gt;= 10000), mapping = aes(color = Population, size = Population)) + # cities layer\n    #scale_color_viridis_c(option = \"magma\") + # continuous (gradient) color scale\n    #scale_fill_gradient(low = \"darkgreen\", high = \"white\") + # continuous (gradient) fill scale\n    #coord_sf(xlim = seven_countyarea[c(\"xmin\", \"xmax\")], ylim = seven_countyarea[c(\"ymin\", \"ymax\")]) + # NEW: crop map to Twin Cities bounding box\n    #labs(title = \"Twin Cities with Population &gt;= 10,000\") + \n    #ggthemes::theme_map() +\n    #theme(legend.position = \"none\") # remove legend\n\n\nLet’s add to the above code chunk to save the map above to an image file called tc_map_zoom.png in the figures folder. The code example below shows a general template for saving a plot to file. Choose a reasonable width and height. (There are also jpeg() and pdf() functions for writing images.)\n\nCode#png(\"relative path to image\", width = width_in_pixels, height = height_in_pixels)\n# Code for creating plot\n#dev.off()",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>4 Advanced Spatial Viz P1</span>"
    ]
  },
  {
    "objectID": "src/ica/04_adv_maps/code/Advanced_maps.html#going-beyond---twin-cities-map-with-leaflet",
    "href": "src/ica/04_adv_maps/code/Advanced_maps.html#going-beyond---twin-cities-map-with-leaflet",
    "title": "4 Advanced Spatial Viz P1",
    "section": "Going Beyond - Twin Cities Map with leaflet\n",
    "text": "Going Beyond - Twin Cities Map with leaflet\n\nBelow we show how to make the MN counties map in the leaflet package.\n\nCode#library(leaflet)\n\n#mn_counties_leaf &lt;- mn_counties |&gt; st_transform(4326) # Leaflet expects this CRS for vectors\n#mn_cities_leaf &lt;- mn_cities |&gt; st_transform(4326)\n\n#cities_per_county &lt;- st_join(mn_cities_leaf, mn_counties_leaf) |&gt;\n    #st_drop_geometry() |&gt; # removes geometry - makes the following calculation more efficient\n    #count(name) \n\n#mn_counties_leaf |&gt; \n    #filter(name %in% c(\"Anoka\", \"Hennepin\", \"Ramsey\", \"Dakota\", \"Carver\", \"Washington\", \"Scott\")) |&gt;\n    #left_join(cities_per_county) |&gt;\n    #leaflet() |&gt; \n    #addProviderTiles(\"CartoDB.Positron\") |&gt; \n    #addPolygons(\n        #color = \"#444444\", weight = 1, smoothFactor = 0.5, opacity = 1.0,\n        #fillOpacity = 0.5, fillColor = ~colorQuantile(\"YlOrRd\", n)(n),\n        #highlightOptions = highlightOptions(color = \"white\", weight = 2, bringToFront = TRUE)) |&gt;\n    #addCircles(data = mn_cities_leaf |&gt; filter(County %in% paste(c(\"Anoka\", \"Hennepin\", \"Ramsey\", \"Dakota\", \"Carver\", \"Washington\", \"Scott\"), \"County\")), color = \"#444444\")",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>4 Advanced Spatial Viz P1</span>"
    ]
  },
  {
    "objectID": "src/ica/04_adv_maps/code/Advanced_maps.html#done",
    "href": "src/ica/04_adv_maps/code/Advanced_maps.html#done",
    "title": "4 Advanced Spatial Viz P1",
    "section": "Done!",
    "text": "Done!\n\nCheck the ICA Instructions for how to (a) push your code to GitHub and (b) update your portfolio website",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>4 Advanced Spatial Viz P1</span>"
    ]
  },
  {
    "objectID": "src/appx/appx-sample1.html",
    "href": "src/appx/appx-sample1.html",
    "title": "Appendix A — Appendix Sample 1",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Appendix Sample 1</span>"
    ]
  },
  {
    "objectID": "src/appx/appx-sample2.html",
    "href": "src/appx/appx-sample2.html",
    "title": "Appendix B — Appendix Sample 2",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Appendix Sample 2</span>"
    ]
  },
  {
    "objectID": "mm/mm.html",
    "href": "mm/mm.html",
    "title": "Appendix C — Mind Maps",
    "section": "",
    "text": "Creativity",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Mind Maps</span>"
    ]
  },
  {
    "objectID": "mm/mm.html#creativity",
    "href": "mm/mm.html#creativity",
    "title": "Appendix C — Mind Maps",
    "section": "",
    "text": "0808-mind_map_example.jpg",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Mind Maps</span>"
    ]
  }
]